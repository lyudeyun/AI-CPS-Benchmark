function tmp = mk_moxunit_tests(dirs,varargin)
% MK_MOXUNIT_TESTS  Make Unit tests from mfiles in directories
% 
% CALL mk_moxunit_tests(dirs, options)
%
%  dirs  = Cell array or character array containing the
%            list of directories with M-files to extract
%            unit tests from. (default '.', i.e., current directory). 
%  options = struct defining performance 
%    .recursive : TRUE if a recursive search for M-files should be used.
%                    (default false)
%    .outdir    : directory for unittests (default 'tests')
%    .output    : 'script' make unittests as standalone script
%                 'class'  make unittests as classes compatible with mlunit
%                 'function' make unittests as functions compatible with moxunit
%                 (default 'function')
%    .method    : 'unittest' Extract test from commentblocks tagged with % UNITTEST %
%                 'example'  Extract test from exampleblocks in the help header
%                 'all'      Extract both example and unittests (default)
% SkipExample
%  mk_moxunit_tests('wafo/spec', 'recursive', true)
% 
% See also m2htmlx, getsubdirs


  options = struct('recursive',false,'outdir','tests','output','function','method','all');

  % method = 'all','unittest','example'
  error(nargchk(1,inf,nargin));
  if nargin==1 && ischar(dirs) && strcmpi(dirs,'defaults')
    tmp = options;
    return
  end

  if nargin<1 || isempty(dirs)
     dirs  = '.';  % search current directory
  end
  if nargin>1
    options = parseoptions(options,varargin{:}); 
  end

  if options.recursive
    dirs = getsubdirs(dirs, inf);
  end

  if ischar(dirs)
    dirs = {dirs};
  end
  if exist(options.outdir,'dir') == 0,
    mkdir(options.outdir);
  end
  if strncmpi(options.output,'script', 1)
    mk_unit_test_script(dirs,options);
  elseif strncmpi(options.output,'class', 1)
    mk_unit_test_class(dirs,options);
  else
    mk_unit_test_function(dirs, options);
  end
end

function mk_unit_test_script(dirs,options)

  fid  = 0;
  for iy = 1:numel(dirs)
    currentFullDir = dirs{iy};
    [pth,currentDir] = fileparts(currentFullDir);
    isclassdir = any(currentFullDir=='@');
    if ~strcmpi(currentDir,'private')
      
      testname = ['testscript_' strtok(currentDir,'@')];
      testFile = fullfile(options.outdir,[testname '.m']);
      if exist(testFile,'file')~=0
        disp(['There allready exists a ', testFile , ' in this directory']);
        disp(['Copied this file to ', testFile  'old']);
        %Make backup copy before overwriting file
        copyfile(testFile,[testFile 'old']);
        delete(testFile);
      end
      
      fid = write_header_to_script(testFile);
      mfiles = getmfiles(currentFullDir);
   
      for ix = 1:numel(mfiles)
        mfile = mfiles{ix};
        [pth,name0,ext] = fileparts(mfile);
        if ~ismember(lower(name0),{'readme','contents'}) && (isclassdir || isfunction(mfile)) 
          unitteststr = extractunittest(mfile,options.method);
          write_test_to_script(fid, mfile,unitteststr);
        end  
      end
      write_summary_to_script(fid, mfiles);
    end
  end

  function fid = write_header_to_script(testFile)
    [fid,msg] = fopen(testFile,'w');          % Open file to write
    if fid==-1, disp(msg); return, end
    fprintf(fid,'%% Unit test script generated by %s\n',mfilename);
    fprintf(fid,'%%\n%% Example\n');
    fprintf(fid,'%% opts.outputDir = tempdir;\n');
    fprintf(fid,'%% file = publish(''%s'',opts)\n',testFile);
    fprintf(fid,'%% web(file)\n%%\n');
    fprintf(fid,'%% See also %s\n\n',mfilename);
    
    fprintf(fid,'setappdata(0,''LOGFAILURES'',cell(1,0)); \n');
    %fprintf(fid,'NUMERRORS = %d; \n',0);
    fprintf(fid,'tic; \n');

  end
  function write_test_to_script(fid, mfile,unitteststr)
    fprintf(fid,'%%%% Unit test for %s : \n \n',mfile);
    fprintf(fid,'CURRENTMFILE = ''%s''; \n',mfile);
    fprintf(fid,'disp(''Unit test for %s'')\n',mfile);
    if isempty(unitteststr)
      fprintf(fid,' disp(''No unit test or example found in %s '')\n',mfile);
    else
      fprintf(fid,'try \n');
      
      fprintf(fid,' %s\n',unitteststr{:});
      fprintf(fid,' disp(''...Ok'')\n');    
      fprintf(fid,'catch \n');
      %fprintf(fid,'disp(''...Failure'')')
      fprintf(fid,' LOGFAILURES = getappdata(0,''LOGFAILURES''); \n');
      fprintf(fid,' LOGFAILURES{end+1} = CURRENTMFILE; \n');
      fprintf(fid,' setappdata(0,''LOGFAILURES'',LOGFAILURES); \n');
      %fprintf(fid,' NUMERRORS = NUMERRORS+1; \n');
      fprintf(fid,' errstrct = lasterror; \n');
      errmsg1 = 'disp(sprintf(''??? %s\n''  , errstrct.message))';
      errmsg2 = 'disp(sprintf(''Failure in ==> %s , at line %d\n'',errstrct.stack(1).file,errstrct.stack(1).line))';
      fprintf(fid,' %s\n',errmsg1);
      fprintf(fid,' %s\n',errmsg2);
      fprintf(fid,'end \n');
    end
  end
  function write_summary_to_script(fid, mfiles)
    fprintf(fid,'%%%% Unit test summary\n');
    fprintf(fid,'LOGFAILURES = getappdata(0,''LOGFAILURES''); \n');
    fprintf(fid,'NUMERRORS = numel(LOGFAILURES); \n');
    fprintf(fid,'disp(''Ran %d tests'')\n',numel(mfiles));
    fprintf(fid,'toc\n');
    fprintf(fid,'disp(sprintf(''Number of Failures : %s'',NUMERRORS))\n','%d');
    fclose(fid);
  end
end



function mk_unit_test_class(dirs,options)

  % [outdirpath,outdir]=fileparts(options.outdir);
  % if isempty(outdirpath) || ~any(outdirpath==':')
  %   outdir = fullfile(pwd,options.outdir);
  % else
  %   outdir = options.outdir;
  % end
   outdir = options.outdir;

  for iy = 1:numel(dirs)
    currentFullDir = dirs{iy};
    [pth,currentDir] = fileparts(currentFullDir);
    isclassdir = any(currentFullDir=='@');
    if ~strcmpi(currentDir,'private')
      
      testname = ['test_' strtok(currentDir,'@')];
      testDir = fullfile(options.outdir,['@' testname ]);
      if ~exist(testDir,'dir')
        fprintf(1,'Making directory: %s\n', testDir);
        mkdir(testDir);
        mktest_constructor(testDir,testname);
      end
      
      mk_suite4all_tests(outdir,testname);
       
      mfiles = getmfiles(currentFullDir);
   
      for ix = 1:numel(mfiles)
        mfile = mfiles{ix};
        [pth,name0,ext] = fileparts(mfile);
        if ~ismember(lower(name0),{'readme','contents'}) && (isclassdir || isfunction(mfile)) 
          testname = ['test_' name0];
          unitteststr = extractunittest(mfile,options.method);
          if ~isempty(unitteststr)
            mktest_function(testDir,testname,unitteststr);
          end
        end  
      end
    end
  end
  %fclose(fid);
end


function mktest_constructor(testDir,testname)
  testname = strtok(testname,'.');
  outputfile = fullfile(testDir,[testname '.m']);
  [fid,msg] = fopen(outputfile,'w');          % Open file to write
  if fid==-1, error(msg); end
  fprintf(fid,'function self = %s(name)\n',testname);
  fprintf(fid,'tc   = test_case(name);\n');
  fprintf(fid,'self = class(struct([]),mfilename,tc);\n');
  fclose(fid);
end
 
function mktest_function(testDir,testname,teststr)
  testname = strtok(testname,'.');
  outputfile = fullfile(testDir,[testname '.m']);
  [fid,msg] = fopen(outputfile,'w');          % Open file to write
  if fid==-1, error(msg); end
  fprintf(fid,'function self = %s(self)\n',testname);
  if iscell(teststr)
    fprintf(fid,'%s\n',teststr{:});
  else
    fprintf(fid,'%s\n',teststr);
  end
  fclose(fid);
end

 function mk_suite4all_tests(outdir,testname)
  %
  %  Example
  %  =======
  %         run(gui_test_runner, 'mlunit_all_tests');

   test_name = sprintf('mlunit_%s_all',testname);
   [fid0, msg] = fopen(fullfile(outdir,[test_name,'.m']),'w');
   if fid0==-1, error(msg); end
   fprintf(fid0,'function suite = %s\n',test_name);
   fprintf(fid0,'%% %s creates a test_suite with all test for.',upper(test_name));
   fprintf(fid0,'%%\n%%  Example\n');
   fprintf(fid0,'%%\n%% run(gui_test_runner, ''%s'')\n',test_name);
   fprintf(fid0,'%%\n%%or\n%% run(text_test_runner(1,1), %s)\n',test_name);
   
   fprintf(fid0,'suite = set_name(test_suite, ''%s'')\n',test_name);
   fprintf(fid0,'suite = add_test(suite, load_tests_from_test_case(test_loader, ''%s''))\n',testname);
   fclose(fid0);
 end

function mk_unit_test_function(dirs,options)

  % [outdirpath,outdir]=fileparts(options.outdir);
  % if isempty(outdirpath) || ~any(outdirpath==':')
  %   outdir = fullfile(pwd,options.outdir);
  % else
  %   outdir = options.outdir;
  % end
   outdir = options.outdir;

  for iy = 1:numel(dirs)
    currentFullDir = dirs{iy};
    [pth,currentDir] = fileparts(currentFullDir);
    isclassdir = any(currentFullDir=='@');
    if ~strcmpi(currentDir,'private')
      
      testname = ['test_' strtok(currentDir,'@')];
      testDir = fullfile(options.outdir, testname);
      if ~exist(testDir, 'dir')
        fprintf(1,'Making directory: %s\n', testDir);
        mkdir(testDir);
        % mktest_constructor(testDir,testname);
      end
      
      # mk_suite4all_tests(outdir,testname)
       
      mfiles = getmfiles(currentFullDir);
   
      for ix = 1:numel(mfiles)
        mfile = mfiles{ix};
        [pth, name0, ext] = fileparts(mfile);
        if ~ismember(lower(name0),{'readme','contents'}) && (isclassdir || isfunction(mfile)) 
          testname = ['test_' name0];
          unitteststr = extractunittest(mfile,options.method);
          if ~isempty(unitteststr)
            disp(testname);
            mk_moxtest_function(testDir,testname,unitteststr);
          else,
            disp([testname, ' have no tests']);
          end
          
        end  
      end
    end
  end
  % fclose(fid);
end

function mk_moxtest_function(testDir,testname,teststr)
  testname = strtok(testname, '.');
  outputfile = fullfile(testDir, [testname '.m']);
  [fid,msg] = fopen(outputfile,'w');          % Open file to write
  if fid==-1, error(msg); end
  
  fprintf(fid,'function test_suite=%s()\n  initTestSuite;\nend\n',testname);
  
  fprintf(fid,'function %s()\n',[testname '_']);
  if iscell(teststr)
    fprintf(fid,' %s\n',teststr{:});
  else
    fprintf(fid,' %s\n',teststr);
  end
  fprintf(fid,'end\n');
  fclose(fid);
end
 
 