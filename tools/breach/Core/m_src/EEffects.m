function [mu, mustar, sigma, sigmastar, EE] = EEffects(Y, D, p)
%EEFFECTS computes the elementary effects for the global sensitivity
% method of Morris, given values Y computed at points in a trajectory
% generated by EE_traj
% 
% Synopsis:  [mu, mustar, sigma] = EEffects(Y, D, p)
% 
% Inputs:
%   - Y  The value of a variable at a specific time instant, for one or
%        many trajectories. The values must be provided as a line vector.
%   - D  matrix indicating which component changes in a path
%   - p  the grid level
% 
% Outputs:
%   - mu      expectation of elementary effects
%   - mustar  expectation of absolute values of elementary effects
%   - sigma   standart deviation of elementary effects
% 
% Example (Lorentz84):
%  P0 = CreateParamSet(Sys, {'a','b'});
%  p = 4;
%  Pr = pRefine(P0, p, 10);
%  Pf = ComputeTraj(Sys, Pr, 0:0.1:10);
%  Y = GetTrajValues(Pf, 'x0', 7);  % guess that the interesting time is t=7
%  
%  [mu, mustar, sigma] = EEffects(Y', Pr.D, p)
% 
%See also pRefine, EE_traj, SPropSensi
%

k = size(D,1); % number of parameters
delta = p/(2*(p-1));
%delta = 1; % delta used for the grid, but do we really need it here? 

% computes diff
if any(isinf(Y))
    % We have Inf entries in Y - replace them by max(Y) + 1
    Y_without_inf = Y(~isinf(Y));
    if isempty(Y_without_inf)
        valToReplaceInf = 100;
    else
        valToReplaceInf = max(Y_without_inf) + 1;
    end
    Y(isinf(Y)) = valToReplaceInf;
end
dY = diff(Y);
idx = 1:size(Y,2);

% size(Y,2) should be some multiple n of k+1 whereas D is some multiple of
% k. We need to remove indices k+1, 2(k+1), ..., (n-1)*k-1 in dY
idx = idx(mod(idx,k+1)~=0); % abracadabra
dY = dY(idx);

%
% To plot all the EEffects of the Nth parameter
% N = 1;    %      --> set N here <--
% is_EE_N = D(N,:)~=0;
% EE_N = dY(is_EE_N);
% figure ; plot([1:numel(EE_N)],EE_N,'-.','LineWidth',0.1);
%

% DY = repmat(dY/delta,[k 1]); % <-- Does NOT work in 2013b!
DY = repmat(dY/delta, k, 1); % <-- What about this ?
EE = DY.*D;
r = numel(dY)/k;
mu = 1/r*sum(EE, 2);
mustar = 1/r* sum(abs(EE), 2);

MU = repmat(mu,[1 size(EE,2)]);
MUSTAR = repmat(mustar,[1 size(EE,2)]);
sigma = sqrt(1/(r-1)* sum((EE-MU).^2,2));
sigmastar = sqrt(1/(r-1)* sum((abs(EE)-MUSTAR).^2,2));

end
